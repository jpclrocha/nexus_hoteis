-- Gerado por Oracle SQL Developer Data Modeler 24.3.1.351.0831
--   em:        2025-09-23 19:41:39 BRT
--   site:      Oracle Database 21c
--   tipo:      Oracle Database 21c

DROP USER SCH_NEXUS CASCADE;
DROP USER SCH_NEXUS_IDENTITY CASCADE;

-- Tablespaces
DROP TABLESPACE TBS_NEXUS_DATA_001 INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS;
DROP TABLESPACE TBS_NEXUS_INDEX_001 INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS;
DROP TABLESPACE TBS_NEXUS_IDENTITY_DATA_001 INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS;
DROP TABLESPACE TBS_NEXUS_IDENTITY_INDEX_001 INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS;

CREATE SMALLFILE TABLESPACE TBS_NEXUS_DATA_001 
    DATAFILE 
        'DF_TBS_NEXUS_DATA_001' SIZE 15 M REUSE AUTOEXTEND ON NEXT 10 M MAXSIZE UNLIMITED 
    LOGGING 
    ONLINE 
    EXTENT MANAGEMENT LOCAL UNIFORM SIZE 1 M
    SEGMENT SPACE MANAGEMENT AUTO
    FLASHBACK ON 
;

CREATE SMALLFILE TABLESPACE TBS_NEXUS_IDENTITY_DATA_001 
    DATAFILE 
        'DF_TBS_NEXUS_IDENTITY_DATA_001' SIZE 10 M REUSE AUTOEXTEND ON NEXT 5 M MAXSIZE UNLIMITED 
    LOGGING 
    ONLINE 
    EXTENT MANAGEMENT LOCAL UNIFORM SIZE 1 M
    SEGMENT SPACE MANAGEMENT AUTO
    FLASHBACK ON 
;

CREATE SMALLFILE TABLESPACE TBS_NEXUS_IDENTITY_INDEX_001 
    DATAFILE 
        'DF_TBS_NEXUS_IDENTITY_INDEX_001' SIZE 10 M REUSE AUTOEXTEND ON NEXT 5 M MAXSIZE UNLIMITED 
    LOGGING 
    ONLINE 
    EXTENT MANAGEMENT LOCAL UNIFORM SIZE 1 M
    SEGMENT SPACE MANAGEMENT AUTO
    FLASHBACK ON 
;

CREATE SMALLFILE TABLESPACE TBS_NEXUS_INDEX_001 
    DATAFILE 
        'DF_TBS_NEXUS_INDEX_001' SIZE 15 M REUSE AUTOEXTEND ON NEXT 10 M MAXSIZE UNLIMITED 
    LOGGING 
    ONLINE 
    EXTENT MANAGEMENT LOCAL UNIFORM SIZE 1 M
    SEGMENT SPACE MANAGEMENT AUTO
    FLASHBACK ON 
;

CREATE USER SCH_NEXUS 
    IDENTIFIED BY sch_nexus_123 
    ACCOUNT UNLOCK 
;

GRANT DBA TO SCH_NEXUS 
;

CREATE USER SCH_NEXUS_IDENTITY 
    IDENTIFIED BY sch_nexus_identity_123 
    ACCOUNT UNLOCK 
;

GRANT DBA TO SCH_NEXUS_IDENTITY 
;

-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE SCH_NEXUS.TAB_AVALIACAO 
    ( 
     ID_AVALIACAO     NUMBER (10) 
         CONSTRAINT TAB_AVALIACOES_ID_NOT_NULL NOT NULL , 
     ID_ESTADIA       NUMBER (10) 
         CONSTRAINT TAB_AVALIACOES_ID_ESTADIA_NOT_NULL NOT NULL , 
     ID_HOSPEDE       NUMBER (10) 
         CONSTRAINT TAB_AVALIACOES_ID_HOSPEDE_NOT_NULL NOT NULL , 
     PONT_LIMPEZA     NUMBER (2) 
         CONSTRAINT TAB_AVALIACOES_PONT_LIMPEZA_NOT_NULL NOT NULL , 
     PONT_ATENDIMENTO NUMBER (2) 
         CONSTRAINT TAB_AVALIACOES_PONT_ATENDIMENTO_NOT_NULL NOT NULL , 
     PONT_COMODIDADES NUMBER (2) 
         CONSTRAINT TAB_AVALIACOES_PONT_COMODIDADES_NOT_NULL NOT NULL , 
     PONT_GERAL       NUMBER (4,2) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_ESTADIA_AVALIACAO ON SCH_NEXUS.TAB_AVALIACAO 
    ( 
     ID_ESTADIA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_ID_HOSPEDE_AVALIACAO ON SCH_NEXUS.TAB_AVALIACAO 
    ( 
     ID_HOSPEDE ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;

ALTER TABLE SCH_NEXUS.TAB_AVALIACAO 
    ADD CONSTRAINT PK_AVALIACAO PRIMARY KEY ( ID_AVALIACAO ) ;

CREATE TABLE SCH_NEXUS_IDENTITY.TAB_CARGO 
    ( 
     ID_CARGO  NUMBER (10) 
         CONSTRAINT CARGO_ID_NOT_NULL NOT NULL , 
     NOM_CARGO VARCHAR2 (50 CHAR) 
         CONSTRAINT CARGO_NOME_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_IDENTITY_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS_IDENTITY.TAB_CARGO TO SCH_NEXUS_IDENTITY WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_CARGO 
    ADD CONSTRAINT PK_CARGO PRIMARY KEY ( ID_CARGO ) ;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_CARGO 
    ADD CONSTRAINT AK_NOME_CARGO UNIQUE ( NOM_CARGO ) ;

CREATE TABLE SCH_NEXUS_IDENTITY.TAB_CARGO_PERMISSAO 
    ( 
     ID_CARGO     NUMBER (10) 
         CONSTRAINT CARGOS_PERMISSOES_CARGO_ID_NOT_NULL NOT NULL , 
     ID_PERMISSAO NUMBER (10) 
         CONSTRAINT CARGOS_PERMISSOES_PERMISSAO_ID_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_IDENTITY_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS_IDENTITY.TAB_CARGO_PERMISSAO TO SCH_NEXUS_IDENTITY WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_CARGO_PERMISSAO 
    ADD CONSTRAINT PK_CARGO_PERMISSAO PRIMARY KEY ( ID_CARGO, ID_PERMISSAO ) ;

CREATE TABLE SCH_NEXUS.TAB_COMODIDADE 
    ( 
     ID_COMODIDADE  NUMBER (10)  NOT NULL , 
     NOM_COMODIDADE VARCHAR2 (20 CHAR) 
         CONSTRAINT NN_NOME_COMODIDADE NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;

ALTER TABLE SCH_NEXUS.TAB_COMODIDADE 
    ADD CONSTRAINT PK_COMODIDADE PRIMARY KEY ( ID_COMODIDADE ) ;

ALTER TABLE SCH_NEXUS.TAB_COMODIDADE 
    ADD CONSTRAINT AK_NOME_COMODIDADE UNIQUE ( NOM_COMODIDADE ) ;

CREATE TABLE SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ( 
     ID_CONSUMO  NUMBER (10) 
         CONSTRAINT CONSUMO_SERVICOS_ID_NOT_NULL NOT NULL , 
     ID_ESTADIA  NUMBER (10) 
         CONSTRAINT CONSUMO_SERVICOS_ID_ESTADIA_NOT_NULL NOT NULL , 
     ID_SERVICO  NUMBER (10) 
         CONSTRAINT CONSUMO_SERVICOS_ID_SERVICOS_NOT_NULL NOT NULL , 
     ID_QUARTO   NUMBER (10) 
         CONSTRAINT CONSUMO_SERVICOS_ID_QUARTO_NOT_NULL NOT NULL , 
     QTD_SERVICO NUMBER (2) 
         CONSTRAINT CONSUMO_SERVICOS_QUANTIDADE_NOT_NULL NOT NULL , 
     VAL_TOTAL   NUMBER (10,2) , 
     DAT_CONSUMO DATE 
         CONSTRAINT CONSUMO_SERVICOS_DATA_CONSUMO_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_ESTADIA_CONSUMO ON SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ( 
     ID_ESTADIA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_ID_SERVICO_CONSUMO ON SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ( 
     ID_SERVICO ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_ID_QUARTO_CONSUMO ON SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ( 
     ID_QUARTO ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_CONSUMO_SERVICO TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ADD CONSTRAINT PK_CONSUMO_SERVICO PRIMARY KEY ( ID_CONSUMO ) ;

CREATE TABLE SCH_NEXUS.TAB_ESTADIA 
    ( 
     ID_ESTADIA        NUMBER (10) 
         CONSTRAINT ESTADIA_ID_NOT_NULL NOT NULL , 
     ID_RESERVA        NUMBER (10) , 
     DAT_CHECKIN_REAL  DATE 
         CONSTRAINT ESTADIA_DATA_CHECKIN_REAL_NOT_NULL NOT NULL , 
     DAT_CHECKOUT_REAL DATE 
         CONSTRAINT ESTADIA_DATA_CHECKOUT_REAL_NOT_NULL NOT NULL , 
     STS_ESTADIA       VARCHAR2 (20 CHAR) 
         CONSTRAINT ESTADIA_STATUS_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_RESERVA_ESTADIA ON SCH_NEXUS.TAB_ESTADIA 
    ( 
     ID_RESERVA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_STATUS_ESTADIA ON SCH_NEXUS.TAB_ESTADIA 
    ( 
     STS_ESTADIA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;

ALTER TABLE SCH_NEXUS.TAB_ESTADIA 
    ADD CONSTRAINT CK_STATUS_ESTADIA 
    CHECK (STS_ESTADIA IN ('HOSPEDADO', 'FINALIZADA'))
;
ALTER TABLE SCH_NEXUS.TAB_ESTADIA 
    ADD CONSTRAINT PK_ESTADIA PRIMARY KEY ( ID_ESTADIA ) ;

CREATE TABLE SCH_NEXUS.TAB_FATURA 
    ( 
     ID_FATURA          NUMBER (10) 
         CONSTRAINT FATURA_ID_NOT_NULL NOT NULL , 
     ID_ESTADIA         NUMBER (10) 
         CONSTRAINT FATURA_ID_ESTADIA_NOT_NULL NOT NULL , 
     DAT_EMISSAO        DATE 
         CONSTRAINT FATURA_DATA_EMISSAO_NOT_NULL NOT NULL , 
     VAL_TOTAL_DIARIAS  NUMBER (10,2) 
         CONSTRAINT FATURA_TOTAL_DIARIAS_NOT_NULL NOT NULL , 
     VAL_TOTAL_SERVICOS NUMBER (10,2) 
         CONSTRAINT FATURA_TOTAL_SERVICOS_NOT_NULL NOT NULL , 
     VAL_IMPOSTOS       NUMBER (10,2) 
         CONSTRAINT FATURA_TOTAL_IMPOSTOS_NOT_NULL NOT NULL , 
     VAL_FINAL          NUMBER (10,2) 
         CONSTRAINT FATURA_VALOR_FINAL_NOT_NULL NOT NULL , 
     STS_FATURA         VARCHAR2 (20 CHAR) 
         CONSTRAINT FATURA_STATUS_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_STATUS_FATURA ON SCH_NEXUS.TAB_FATURA 
    ( 
     STS_FATURA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_FATURA TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_FATURA 
    ADD CONSTRAINT FATURAS_STATUS_CK 
    CHECK (STS_FATURA IN ('PENDENTE', 'PAGA', 'PARCIALMENTE_PAGA', 'CANCELADA'))
;
ALTER TABLE SCH_NEXUS.TAB_FATURA 
    ADD CONSTRAINT PK_FATURAS PRIMARY KEY ( ID_FATURA ) ;

CREATE TABLE SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO 
    ( 
     ID_FUNCIONARIO   NUMBER (10) 
         CONSTRAINT FUNCIONARIO_ID_NOT_NULL NOT NULL , 
     ID_CARGO         NUMBER (10) 
         CONSTRAINT FUNCIONARIO_CARGO_ID_NOT_NULL NOT NULL , 
     NOM_FUNCIONARIO  VARCHAR2 (100 CHAR) 
         CONSTRAINT FUNCIONARIO_NOME_NOT_NULL NOT NULL , 
     DAT_ADMISSAO     DATE 
         CONSTRAINT FUNCIONARIO_DATA_ADMISSAO_NOT_NULL NOT NULL , 
     DAT_DEMISSAO     DATE 
         CONSTRAINT FUNCIONARIO_DATA_DEMISSAO_NOT_NULL NOT NULL , 
     SAL_FUNIONARIO   NUMBER (10,2) 
         CONSTRAINT FUNCIONARIO_SALARIO_NOT_NULL NOT NULL , 
     USER_FUNCIONARIO VARCHAR2 (50 CHAR) 
         CONSTRAINT FUNCIONARIO_USERNAME_NOT_NULL NOT NULL , 
     PASS_FUNCIONARIO VARCHAR2 (255 CHAR) 
         CONSTRAINT FUNCIONARIO_PASSWORD_NOT_NULL NOT NULL , 
     STS_FUNCIONARIO  VARCHAR2 (30 CHAR) 
         CONSTRAINT FUNCIONARIO_STATUS_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_IDENTITY_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS_IDENTITY.IDX_ID_CARGO_FUNCIONARIO ON SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO 
    ( 
     ID_CARGO ASC 
    ) 
    TABLESPACE TBS_NEXUS_IDENTITY_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO TO SCH_NEXUS_IDENTITY WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO 
    ADD CONSTRAINT CK_STATUS_FUNCIONARIO 
    CHECK (STS_FUNCIONARIO IN ('ATIVO','DEMITIDO','AFASTADO'))
;
ALTER TABLE SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO 
    ADD CONSTRAINT PK_FUNCIONARIO PRIMARY KEY ( ID_FUNCIONARIO ) ;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO 
    ADD CONSTRAINT AK_USER_FUNCIONARIO UNIQUE ( USER_FUNCIONARIO ) ;

CREATE TABLE SCH_NEXUS.TAB_HOSPEDE 
    ( 
     ID_HOSPEDE     NUMBER (10) 
         CONSTRAINT HOSPEDE_ID_NOT_NULL NOT NULL , 
     PNM_HOSPEDE    VARCHAR2 (50 CHAR) 
         CONSTRAINT HOSPEDE_PNOME_NOT_NULL NOT NULL , 
     UNM_HOSPEDE    VARCHAR2 (50 CHAR) 
         CONSTRAINT HOSPEDE_UNOME_NOT_NULL NOT NULL , 
     DAT_NASCIMENTO DATE 
         CONSTRAINT HOSPEDE_DATA_NASCIMENTO_NOT_NULL NOT NULL , 
     CPF_HOSPEDE    CHAR (11 CHAR) 
         CONSTRAINT HOSPEDE_CPF_NOT_NULL NOT NULL , 
     EMAIL_HOSPEDE  VARCHAR2 (50 CHAR) 
         CONSTRAINT HOSPEDE_EMAIL_NOT_NULL NOT NULL , 
     TEL_HOSPEDE    VARCHAR2 (20 CHAR) 
         CONSTRAINT HOSPEDE_TELEFONE_NOT_NULL NOT NULL , 
     PAIS_HOSPEDE   VARCHAR2 (50 CHAR) 
         CONSTRAINT PAIS_HOSPEDE_NOT_NULL NOT NULL , 
     CIDADE_HOSPEDE VARCHAR2 (50 CHAR) 
         CONSTRAINT HOSPEDE_CIDADE_NOT_NULL NOT NULL , 
     END_HOSPEDE    VARCHAR2 (100 CHAR) 
         CONSTRAINT HOSPEDE_ENDERECO_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_NOMES_HOSPEDE ON SCH_NEXUS.TAB_HOSPEDE 
    ( 
     PNM_HOSPEDE ASC , 
     UNM_HOSPEDE ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_HOSPEDE TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_HOSPEDE 
    ADD CONSTRAINT PK_HOSPEDE PRIMARY KEY ( ID_HOSPEDE ) ;

ALTER TABLE SCH_NEXUS.TAB_HOSPEDE 
    ADD CONSTRAINT AK_CPF_HOSPEDE UNIQUE ( CPF_HOSPEDE ) ;

ALTER TABLE SCH_NEXUS.TAB_HOSPEDE 
    ADD CONSTRAINT AK_EMAIL_HOSPEDE UNIQUE ( EMAIL_HOSPEDE ) ;

CREATE TABLE SCH_NEXUS.TAB_HOSPEDE_ESTADIA 
    ( 
     ID_ESTADIA NUMBER (10) 
         CONSTRAINT HOSPEDES_ESTADIA_ID_ESTADIA_NOT_NULL NOT NULL , 
     ID_HOSPEDE NUMBER (10) 
         CONSTRAINT HOSPEDES_ESTADIA_ID_HOSPEDE_NOT_NULL NOT NULL , 
     ID_QUARTO  NUMBER (10) 
         CONSTRAINT HOSPEDES_ESTADIA_ID_QUARTO_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_HOSPEDE_HOSP_ESTADIA ON SCH_NEXUS.TAB_HOSPEDE_ESTADIA 
    ( 
     ID_HOSPEDE ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_HOSPEDE_ESTADIA TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_HOSPEDE_ESTADIA 
    ADD CONSTRAINT PK_HOSPEDE_ESTADIA PRIMARY KEY ( ID_ESTADIA, ID_HOSPEDE, ID_QUARTO ) ;

CREATE TABLE SCH_NEXUS.TAB_PAGAMENTO 
    ( 
     ID_PAGAMENTO  NUMBER (10) 
         CONSTRAINT PAGAMENTO_ID_NOT_NULL NOT NULL , 
     ID_FATURA     NUMBER (10) 
         CONSTRAINT PAGAMENTO_ID_FATURA_NOT_NULL NOT NULL , 
     VAL_PAGO      NUMBER (10,2) 
         CONSTRAINT PAGAMENTO_VALOR_PAGO_NOT_NULL NOT NULL , 
     MET_PAGAMENTO VARCHAR2 (20 CHAR) 
         CONSTRAINT PAGAMENTO_METODO_PAGAMENTO_NOT_NULL NOT NULL , 
     DAT_PAGAMENTO DATE 
         CONSTRAINT PAGAMENTO_DATA_PAGAMENTO_NOT_NULL NOT NULL , 
     OBS_PAGAMENTO VARCHAR2 (255 CHAR) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_FATURA_PAGAMENTO ON SCH_NEXUS.TAB_PAGAMENTO 
    ( 
     ID_FATURA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_PAGAMENTO TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_PAGAMENTO 
    ADD CONSTRAINT PK_PAGAMENTO PRIMARY KEY ( ID_PAGAMENTO ) ;

CREATE TABLE SCH_NEXUS.TAB_PERIODO_TARIFA 
    ( 
     ID_PERIODO  NUMBER (10) 
         CONSTRAINT PERIODO_TARIFA_ID_NOT_NULL NOT NULL , 
     NOM_PERIODO VARCHAR2 (50 CHAR) 
         CONSTRAINT TARIFA_PERIODO_NOME_NOT_NULL NOT NULL , 
     DAT_INICIO  DATE 
         CONSTRAINT PERIODO_TARIFA_DATA_INICIO_NOT_NULL NOT NULL , 
     DAT_FIM     DATE 
         CONSTRAINT PERIODO_TARIFA_DATA_FIM_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_PERIODO_TARIFA TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_PERIODO_TARIFA 
    ADD CONSTRAINT PK_PERIODO_TARIFA PRIMARY KEY ( ID_PERIODO ) ;

CREATE TABLE SCH_NEXUS_IDENTITY.TAB_PERMISSAO 
    ( 
     ID_PERMISSAO  NUMBER (10) 
         CONSTRAINT PERMISSAO_ID_NOT_NULL NOT NULL , 
     NOM_PERMISSAO VARCHAR2 (50 CHAR) 
         CONSTRAINT PERMISSAO_NOME_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_IDENTITY_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS_IDENTITY.TAB_PERMISSAO TO SCH_NEXUS_IDENTITY WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_PERMISSAO 
    ADD CONSTRAINT PK_PERMISSAO PRIMARY KEY ( ID_PERMISSAO ) ;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_PERMISSAO 
    ADD CONSTRAINT AK_NOME_PERMISSAO UNIQUE ( NOM_PERMISSAO ) ;

CREATE TABLE SCH_NEXUS.TAB_QUARTO 
    ( 
     ID_QUARTO     NUMBER (10) 
         CONSTRAINT QUARTOS_ID_NOT_NULL NOT NULL , 
     NUM_QUARTO    VARCHAR2 (10 CHAR) 
         CONSTRAINT QUARTO_NUMERO_NOT_NULL NOT NULL , 
     ID_TIPOQUARTO NUMBER (10) 
         CONSTRAINT QUARTOS_TIPO_ID_NOT_NULL NOT NULL , 
     AND_QUARTO    NUMBER (2) 
         CONSTRAINT QUARTO_ANDAR_NOT_NULL NOT NULL , 
     STS_QUARTO    VARCHAR2 (25 CHAR) 
         CONSTRAINT QUARTO_STATUS_NOT_NULL NOT NULL , 
     OBS_QUARTO    VARCHAR2 (255 CHAR) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_TIPOQUARTO_QUARTO ON SCH_NEXUS.TAB_QUARTO 
    ( 
     ID_TIPOQUARTO ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_STATUS_QUARTO ON SCH_NEXUS.TAB_QUARTO 
    ( 
     STS_QUARTO ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_QUARTO TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO 
    ADD CONSTRAINT CK_STATUS_QUARTO 
    CHECK (STS_QUARTO IN ('DISPONIVEL', 'OCUPADO', 'LIMPEZA_PENDENTE', 'EM_MANUTENCAO','BLOQUEADO'))
;
ALTER TABLE SCH_NEXUS.TAB_QUARTO 
    ADD CONSTRAINT PK_QUARTO PRIMARY KEY ( ID_QUARTO ) ;

ALTER TABLE SCH_NEXUS.TAB_QUARTO 
    ADD CONSTRAINT AK_NUMERO_QUARTO UNIQUE ( NUM_QUARTO ) ;

CREATE TABLE SCH_NEXUS.TAB_QUARTO_COMODIDADE 
    ( 
     ID_QUARTO     NUMBER (10)  NOT NULL , 
     ID_COMODIDADE NUMBER (10)  NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO_COMODIDADE 
    ADD CONSTRAINT PK_QUARTO_COMODIDADE PRIMARY KEY ( ID_QUARTO, ID_COMODIDADE ) ;

CREATE TABLE SCH_NEXUS.TAB_QUARTO_RESERVADO 
    ( 
     ID_RESERVA NUMBER (10) 
         CONSTRAINT RESERVA_QUARTO_ID_RESERVA_NOT_NULL NOT NULL , 
     ID_QUARTO  NUMBER (10) 
         CONSTRAINT RESERVA_QUARTO_ID_QUARTO_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_QUARTO_RESERVADO TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO_RESERVADO 
    ADD CONSTRAINT PK_QUARTO_RESERVADO PRIMARY KEY ( ID_RESERVA, ID_QUARTO ) ;

CREATE TABLE SCH_NEXUS.TAB_RESERVA 
    ( 
     ID_RESERVA            NUMBER (10) 
         CONSTRAINT RESERVA_ID_NOT_NULL NOT NULL , 
     ID_HOSPEDE_PRINCIPAL  NUMBER (10) 
         CONSTRAINT RESERVA_ID_HOSPEDE_PRINCIPAL_NOT_NULL NOT NULL , 
     DAT_RESERVA           DATE 
         CONSTRAINT RESERVA_DATA_RESERVA_NOT_NULL NOT NULL , 
     DAT_CHECKIN_PREVISTA  DATE 
         CONSTRAINT RESERVA_DATA_CHECKIN_PREVISTA NOT NULL , 
     DAT_CHECKOUT_PREVISTA DATE 
         CONSTRAINT RESERVA_DATA_CHECKOUT_PREVISTA NOT NULL , 
     NUM_ADULTOS           NUMBER (2) 
         CONSTRAINT RESERVA_NUMERO_ADULTOS_NOT_NULL NOT NULL , 
     NUM_CRIANCAS          NUMBER (2) , 
     STS_RESERVA           VARCHAR2 (20 CHAR) 
         CONSTRAINT RESERVA_STATUS_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_HOSPEDE_RESERVA ON SCH_NEXUS.TAB_RESERVA 
    ( 
     ID_HOSPEDE_PRINCIPAL ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_DT_CHECKIN_RESERVA ON SCH_NEXUS.TAB_RESERVA 
    ( 
     DAT_CHECKIN_PREVISTA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_DT_CHECKOUT_RESERVA ON SCH_NEXUS.TAB_RESERVA 
    ( 
     DAT_CHECKOUT_PREVISTA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_STATUS_RESERVA ON SCH_NEXUS.TAB_RESERVA 
    ( 
     STS_RESERVA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_RESERVA TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_RESERVA 
    ADD CONSTRAINT CK_STATUS_RESERVA 
    CHECK (STS_RESERVA IN ('CONFIRMADA', 'PENDENTE', 'CANCELADA', 'NOSHOW'))
;
ALTER TABLE SCH_NEXUS.TAB_RESERVA 
    ADD CONSTRAINT PK_RESERVA PRIMARY KEY ( ID_RESERVA ) ;

CREATE TABLE SCH_NEXUS.TAB_SERVICO 
    ( 
     ID_SERVICO  NUMBER (10) 
         CONSTRAINT SERVICO_ID_NOT_NULL NOT NULL , 
     NOM_SERVICO VARCHAR2 (50 CHAR) 
         CONSTRAINT SERVICO_NOME_NOT_NULL NOT NULL , 
     DES_SERVICO VARCHAR2 (500 CHAR) 
         CONSTRAINT SERVICO_DESCRICAO_NOT_NULL NOT NULL , 
     VAL_SERVICO NUMBER (10,2) 
         CONSTRAINT SERVICO_PRECO_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_SERVICO TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_SERVICO 
    ADD CONSTRAINT PK_SERVICO PRIMARY KEY ( ID_SERVICO ) ;

CREATE TABLE SCH_NEXUS.TAB_TARIFA 
    ( 
     ID_TARIFA         NUMBER (10) 
         CONSTRAINT TARIFA_ID_NOT_NULL NOT NULL , 
     ID_TIPO_QUARTO    NUMBER (10) 
         CONSTRAINT TARIFA_ID_TIPO_QUARTO_NOT_NULL NOT NULL , 
     ID_PERIODO_TARIFA NUMBER (10)  NOT NULL , 
     VAL_DIARIA        NUMBER (10,2) 
         CONSTRAINT TARIFA_PRECO_DIARIA_NOT_NULL NOT NULL , 
     DIA_SEMANA        VARCHAR2 (15 CHAR) 
         CONSTRAINT TARIFA_DIA_SEMANA_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;
CREATE INDEX SCH_NEXUS.IDX_ID_TIPO_QUARTO_TARIFA ON SCH_NEXUS.TAB_TARIFA 
    ( 
     ID_TIPO_QUARTO ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;
CREATE INDEX SCH_NEXUS.IDX_ID_PERIODO_TARIFA ON SCH_NEXUS.TAB_TARIFA 
    ( 
     ID_PERIODO_TARIFA ASC 
    ) 
    TABLESPACE TBS_NEXUS_INDEX 
    PCTFREE 10 
    STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    LOGGING 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_TARIFA TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_TARIFA 
    ADD CONSTRAINT PK_TARIFA PRIMARY KEY ( ID_TARIFA ) ;

CREATE TABLE SCH_NEXUS.TAB_TIPO_QUARTO 
    ( 
     ID_TIPO    NUMBER (10) 
         CONSTRAINT NNC_TIPOS_QUARTO_id_tipo_quarto NOT NULL , 
     NOM_TIPO   VARCHAR2 (50 CHAR) 
         CONSTRAINT TIPO_QUARTO_NOME_NOT_NULL NOT NULL , 
     CAP_MAXIMA NUMBER (2) 
         CONSTRAINT TIPO_QUARTO_CAPACIDADE_MAXIMA_NOT_NULL NOT NULL , 
     DESC_TIPO  VARCHAR2 (500 CHAR) 
         CONSTRAINT TIPO_QUARTO_DESCRICAO_NOT_NULL NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        TABLESPACE TBS_NEXUS_DATA 
        LOGGING 
        STORAGE ( 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;


GRANT ALL PRIVILEGES
    ON SCH_NEXUS.TAB_TIPO_QUARTO TO SCH_NEXUS WITH GRANT OPTION 
;

ALTER TABLE SCH_NEXUS.TAB_TIPO_QUARTO 
    ADD CONSTRAINT PK_TIPO_QUARTO PRIMARY KEY ( ID_TIPO ) ;

ALTER TABLE SCH_NEXUS.TAB_TIPO_QUARTO 
    ADD CONSTRAINT AK_NOME_TIPO_QUARTO UNIQUE ( NOM_TIPO ) ;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO 
    ADD CONSTRAINT FK_CARGO_FUNCIONARIO FOREIGN KEY 
    ( 
     ID_CARGO
    ) 
    REFERENCES SCH_NEXUS_IDENTITY.TAB_CARGO 
    ( 
     ID_CARGO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_CARGO_PERMISSAO 
    ADD CONSTRAINT FK_CARGO_TAB_CARGO_PERMISSAO FOREIGN KEY 
    ( 
     ID_CARGO
    ) 
    REFERENCES SCH_NEXUS_IDENTITY.TAB_CARGO 
    ( 
     ID_CARGO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO_COMODIDADE 
    ADD CONSTRAINT FK_COMODIDADE FOREIGN KEY 
    ( 
     ID_COMODIDADE
    ) 
    REFERENCES SCH_NEXUS.TAB_COMODIDADE 
    ( 
     ID_COMODIDADE
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_AVALIACAO 
    ADD CONSTRAINT FK_ESTADIA_AVALIACAO FOREIGN KEY 
    ( 
     ID_ESTADIA
    ) 
    REFERENCES SCH_NEXUS.TAB_ESTADIA 
    ( 
     ID_ESTADIA
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ADD CONSTRAINT FK_ESTADIA_CONSUMO_SERVICO FOREIGN KEY 
    ( 
     ID_ESTADIA
    ) 
    REFERENCES SCH_NEXUS.TAB_ESTADIA 
    ( 
     ID_ESTADIA
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_FATURA 
    ADD CONSTRAINT FK_ESTADIA_FATURAS FOREIGN KEY 
    ( 
     ID_ESTADIA
    ) 
    REFERENCES SCH_NEXUS.TAB_ESTADIA 
    ( 
     ID_ESTADIA
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_HOSPEDE_ESTADIA 
    ADD CONSTRAINT FK_ESTADIA_TAB_HOSPEDE_ESTADIA FOREIGN KEY 
    ( 
     ID_ESTADIA
    ) 
    REFERENCES SCH_NEXUS.TAB_ESTADIA 
    ( 
     ID_ESTADIA
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_PAGAMENTO 
    ADD CONSTRAINT FK_FATURAS_PAGAMENTO FOREIGN KEY 
    ( 
     ID_FATURA
    ) 
    REFERENCES SCH_NEXUS.TAB_FATURA 
    ( 
     ID_FATURA
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_AVALIACAO 
    ADD CONSTRAINT FK_HOSPEDE_AVALIACAO FOREIGN KEY 
    ( 
     ID_HOSPEDE
    ) 
    REFERENCES SCH_NEXUS.TAB_HOSPEDE 
    ( 
     ID_HOSPEDE
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_RESERVA 
    ADD CONSTRAINT FK_HOSPEDE_RESERVA FOREIGN KEY 
    ( 
     ID_HOSPEDE_PRINCIPAL
    ) 
    REFERENCES SCH_NEXUS.TAB_HOSPEDE 
    ( 
     ID_HOSPEDE
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_HOSPEDE_ESTADIA 
    ADD CONSTRAINT FK_HOSPEDE_TAB_HOSPEDE_ESTADIA FOREIGN KEY 
    ( 
     ID_HOSPEDE
    ) 
    REFERENCES SCH_NEXUS.TAB_HOSPEDE 
    ( 
     ID_HOSPEDE
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_TARIFA 
    ADD CONSTRAINT FK_PERIODO_TARIFA FOREIGN KEY 
    ( 
     ID_PERIODO_TARIFA
    ) 
    REFERENCES SCH_NEXUS.TAB_PERIODO_TARIFA 
    ( 
     ID_PERIODO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS_IDENTITY.TAB_CARGO_PERMISSAO 
    ADD CONSTRAINT FK_PERMISSAO_TAB_CARGO_PERMISSAO FOREIGN KEY 
    ( 
     ID_PERMISSAO
    ) 
    REFERENCES SCH_NEXUS_IDENTITY.TAB_PERMISSAO 
    ( 
     ID_PERMISSAO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO_COMODIDADE 
    ADD CONSTRAINT FK_QUARTO FOREIGN KEY 
    ( 
     ID_QUARTO
    ) 
    REFERENCES SCH_NEXUS.TAB_QUARTO 
    ( 
     ID_QUARTO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ADD CONSTRAINT FK_QUARTO_CONSUMO_SERVICO FOREIGN KEY 
    ( 
     ID_QUARTO
    ) 
    REFERENCES SCH_NEXUS.TAB_QUARTO 
    ( 
     ID_QUARTO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_HOSPEDE_ESTADIA 
    ADD CONSTRAINT FK_QUARTO_TAB_HOSPEDE_ESTADIA FOREIGN KEY 
    ( 
     ID_QUARTO
    ) 
    REFERENCES SCH_NEXUS.TAB_QUARTO 
    ( 
     ID_QUARTO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO_RESERVADO 
    ADD CONSTRAINT FK_QUARTO_TAB_QUARTO_RESERVADO FOREIGN KEY 
    ( 
     ID_QUARTO
    ) 
    REFERENCES SCH_NEXUS.TAB_QUARTO 
    ( 
     ID_QUARTO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_ESTADIA 
    ADD CONSTRAINT FK_RESERVA_ESTADIA FOREIGN KEY 
    ( 
     ID_RESERVA
    ) 
    REFERENCES SCH_NEXUS.TAB_RESERVA 
    ( 
     ID_RESERVA
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO_RESERVADO 
    ADD CONSTRAINT FK_RESERVA_TAB_QUARTO_RESERVADO FOREIGN KEY 
    ( 
     ID_RESERVA
    ) 
    REFERENCES SCH_NEXUS.TAB_RESERVA 
    ( 
     ID_RESERVA
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_CONSUMO_SERVICO 
    ADD CONSTRAINT FK_SERVICO_CONSUMO_SERVICO FOREIGN KEY 
    ( 
     ID_SERVICO
    ) 
    REFERENCES SCH_NEXUS.TAB_SERVICO 
    ( 
     ID_SERVICO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_TARIFA 
    ADD CONSTRAINT FK_TIPO_QUARTO_TARIFA FOREIGN KEY 
    ( 
     ID_TIPO_QUARTO
    ) 
    REFERENCES SCH_NEXUS.TAB_TIPO_QUARTO 
    ( 
     ID_TIPO
    ) 
    NOT DEFERRABLE 
;

ALTER TABLE SCH_NEXUS.TAB_QUARTO 
    ADD CONSTRAINT FK_TIPOQUARTO_TAB_QUARTO FOREIGN KEY 
    ( 
     ID_TIPOQUARTO
    ) 
    REFERENCES SCH_NEXUS.TAB_TIPO_QUARTO 
    ( 
     ID_TIPO
    ) 
    NOT DEFERRABLE 
;

CREATE OR REPLACE VIEW VW_CHECKOUT_DIA ( ID_ESTADIA, NOME_HOSPEDE, NUM_QUARTO, DAT_CHECKOUT_PREVISTA ) AS
SELECT
    e.ID_ESTADIA,
    h.PNM_HOSPEDE || ' ' || h.UNM_HOSPEDE AS NOME_HOSPEDE,
    q.NUM_QUARTO,
    r.DAT_CHECKOUT_PREVISTA
FROM
    SCH_NEXUS.TAB_ESTADIA e
JOIN
    SCH_NEXUS.TAB_RESERVA r ON e.ID_RESERVA = r.ID_RESERVA
JOIN
    SCH_NEXUS.TAB_HOSPEDE h ON r.ID_HOSPEDE_PRINCIPAL = h.ID_HOSPEDE
JOIN
    SCH_NEXUS.TAB_HOSPEDE_ESTADIA he ON e.ID_ESTADIA = he.ID_ESTADIA
JOIN
    SCH_NEXUS.TAB_QUARTO q ON he.ID_QUARTO = q.ID_QUARTO
WHERE
    e.STS_ESTADIA = 'HOSPEDADO'
    AND TRUNC(r.DAT_CHECKOUT_PREVISTA) = TRUNC(SYSDATE) 
;

CREATE OR REPLACE VIEW VW_FUNCIONARIO ( ID_FUNCIONARIO, NOM_FUNCIONARIO, NOM_CARGO, DAT_ADMISSAO, STS_FUNCIONARIO ) AS
SELECT
    f.ID_FUNCIONARIO,
    f.NOM_FUNCIONARIO,
    c.NOM_CARGO,
    f.DAT_ADMISSAO,
    f.STS_FUNCIONARIO
FROM
    SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO f
JOIN
    SCH_NEXUS_IDENTITY.TAB_CARGO c ON f.ID_CARGO = c.ID_CARGO 
;

CREATE OR REPLACE VIEW VW_QUARTO_OCUPADO ( NUM_QUARTO, NOM_TIPO, AND_QUARTO, STS_QUARTO, HOSPEDE_PRINCIPAL, DAT_CHECKOUT_PREVISTA ) AS
SELECT
    q.NUM_QUARTO,
    tq.NOM_TIPO,
    q.AND_QUARTO,
    q.STS_QUARTO,
    h.PNM_HOSPEDE || ' ' || h.UNM_HOSPEDE AS HOSPEDE_PRINCIPAL,
    r.DAT_CHECKOUT_PREVISTA
FROM
    SCH_NEXUS.TAB_QUARTO q
INNER JOIN
    SCH_NEXUS.TAB_TIPO_QUARTO tq ON q.ID_TIPOQUARTO = tq.ID_TIPO
LEFT JOIN
    SCH_NEXUS.TAB_HOSPEDE_ESTADIA he ON q.ID_QUARTO = he.ID_QUARTO
LEFT JOIN
    SCH_NEXUS.TAB_ESTADIA e ON he.ID_ESTADIA = e.ID_ESTADIA AND e.STS_ESTADIA = 'HOSPEDADO'
LEFT JOIN
    SCH_NEXUS.TAB_RESERVA r ON e.ID_RESERVA = r.ID_RESERVA
LEFT JOIN
    SCH_NEXUS.TAB_HOSPEDE h ON r.ID_HOSPEDE_PRINCIPAL = h.ID_HOSPEDE
ORDER BY
    q.NUM_QUARTO 
;

CREATE SEQUENCE SCH_NEXUS_IDENTITY.CARGOS_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS_IDENTITY.CARGOS_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS_IDENTITY.TAB_CARGO 
FOR EACH ROW 
WHEN (NEW.ID_CARGO IS NULL) 
BEGIN 
    :NEW.ID_CARGO := SCH_NEXUS_IDENTITY.CARGOS_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.CONSUMO_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.CONSUMO_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_CONSUMO_SERVICO 
FOR EACH ROW 
WHEN (NEW.ID_CONSUMO IS NULL) 
BEGIN 
    :NEW.ID_CONSUMO := SCH_NEXUS.CONSUMO_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.ESTADIA_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.ESTADIA_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_ESTADIA 
FOR EACH ROW 
WHEN (NEW.ID_ESTADIA IS NULL) 
BEGIN 
    :NEW.ID_ESTADIA := SCH_NEXUS.ESTADIA_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.FATURA_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.FATURA_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_FATURA 
FOR EACH ROW 
WHEN (NEW.ID_FATURA IS NULL) 
BEGIN 
    :NEW.ID_FATURA := SCH_NEXUS.FATURA_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS_IDENTITY.FUNCIONARIOS_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS_IDENTITY.FUNCIONARIOS_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS_IDENTITY.TAB_FUNCIONARIO 
FOR EACH ROW 
WHEN (NEW.ID_FUNCIONARIO IS NULL) 
BEGIN 
    :NEW.ID_FUNCIONARIO := SCH_NEXUS_IDENTITY.FUNCIONARIOS_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.HOSPEDES_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.HOSPEDES_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_HOSPEDE 
FOR EACH ROW 
WHEN (NEW.ID_HOSPEDE IS NULL) 
BEGIN 
    :NEW.ID_HOSPEDE := SCH_NEXUS.HOSPEDES_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.PAGAMENTO_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.PAGAMENTO_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_PAGAMENTO 
FOR EACH ROW 
WHEN (NEW.ID_PAGAMENTO IS NULL) 
BEGIN 
    :NEW.ID_PAGAMENTO := SCH_NEXUS.PAGAMENTO_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.PERIODO_TARIFA_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.PERIODO_TARIFA_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_PERIODO_TARIFA 
FOR EACH ROW 
WHEN (NEW.ID_PERIODO IS NULL) 
BEGIN 
    :NEW.ID_PERIODO := SCH_NEXUS.PERIODO_TARIFA_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS_IDENTITY.PERMISSOES_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS_IDENTITY.PERMISSOES_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS_IDENTITY.TAB_PERMISSAO 
FOR EACH ROW 
WHEN (NEW.ID_PERMISSAO IS NULL) 
BEGIN 
    :NEW.ID_PERMISSAO := SCH_NEXUS_IDENTITY.PERMISSOES_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.QUARTO_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.QUARTO_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_QUARTO 
FOR EACH ROW 
WHEN (NEW.ID_QUARTO IS NULL) 
BEGIN 
    :NEW.ID_QUARTO := SCH_NEXUS.QUARTO_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.RESERVAS_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.RESERVAS_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_RESERVA 
FOR EACH ROW 
WHEN (NEW.ID_RESERVA IS NULL) 
BEGIN 
    :NEW.ID_RESERVA := SCH_NEXUS.RESERVAS_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.SERVICOS_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.SERVICOS_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_SERVICO 
FOR EACH ROW 
WHEN (NEW.ID_SERVICO IS NULL) 
BEGIN 
    :NEW.ID_SERVICO := SCH_NEXUS.SERVICOS_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.TARIFA_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.TARIFA_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_TARIFA 
FOR EACH ROW 
WHEN (NEW.ID_TARIFA IS NULL) 
BEGIN 
    :NEW.ID_TARIFA := SCH_NEXUS.TARIFA_ID_SEQUENCE.NEXTVAL; 
END;
/

CREATE SEQUENCE SCH_NEXUS.TIPOS_QUARTO_ID_SEQUENCE 
START WITH 1 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER SCH_NEXUS.TIPOS_QUARTO_ID_TRIGGER 
BEFORE INSERT ON SCH_NEXUS.TAB_TIPO_QUARTO 
FOR EACH ROW 
WHEN (NEW.ID_TIPO IS NULL) 
BEGIN 
    :NEW.ID_TIPO := SCH_NEXUS.TIPOS_QUARTO_ID_SEQUENCE.NEXTVAL; 
END;
/



-- Relatório do Resumo do Oracle SQL Developer Data Modeler: 
-- 
-- CREATE TABLE                            20
-- CREATE INDEX                            20
-- ALTER TABLE                             55
-- CREATE VIEW                              3
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          14
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         14
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        4
-- CREATE USER                              2
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
